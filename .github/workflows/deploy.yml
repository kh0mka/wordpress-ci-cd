name: Implementing CI/CD with Terraform
on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
  AWS_REGION: eu-north-1

jobs:
  infrastructure-deployment:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}
      RDS_HOSTNAME: ${{ steps.set-rds-hostname.outputs.rds_hostname }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Initializing Terraform
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=eu-north-1"
        working-directory: ./terraform
      - name: Planning Terraform
        id: plan
        run: |-
          terraform plan \
          -var="public_key=$PUBLIC_SSH_KEY" \
          -var="private_key=$PRIVATE_SSH_KEY" \
          -var="key_name=wordpresscicd" \
          -out=PLAN
        working-directory: ./terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: Trying to get EC2 Public IP
        id: set-ip
        run: |
          ip=$(terraform output instance_public_ip | tr -d '[],' | tr -d '[:space:]')
          echo "instance_public_ip=$ip" >> $GITHUB_OUTPUT
        working-directory: ./terraform
      - name: Trying to get RDS Hostname
        id: set-rds-hostname
        run: |
          rds=$(terraform output rds_hostname)
          rds=$(echo $rds | sed 's/"//g')
          echo "rds_hostname=$rds" >> $GITHUB_OUTPUT
        working-directory: ./terraform
  deploy-app:
    runs-on: ubuntu-latest
    needs: infrastructure-deployment
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setting an IP address as env variable
        run: echo SERVER_PUBLIC_IP=${{ needs.infrastructure-deployment.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
      - name: Setting an RDS Hostname as env variable
        run: echo RDS_HOSTNAME=${{ needs.infrastructure-deployment.outputs.RDS_HOSTNAME }} >> $GITHUB_ENV
      - name: Connect to EC2 instance via ssh
        env:
          AWS_DEFAULT_REGION: eu-north-1
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: PRIVATE_SSH_KEY,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_REGION,RDS_HOSTNAME,GH_ACCESS_TOKEN
          script: |-
            sudo apt update
            sudo su
            git clone https://$GH_ACCESS_TOKEN@github.com/kh0mka/wordpress-ci-cd.git
            cd wp-http/
            echo "RDS_HOSTNAME=$RDS_HOSTNAME" > .env
            cat .env
#            sudo apt install docker.io -y
#            sudo apt install awscli -y
#            sudo docker stop miroappcont || true
#            sudo docker rm miroappcont || true
#            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
#            sudo docker run -d --name miroappcont -p 3000:3000 $REGISTRY/$REPOSITORY:$IMAGE_TAG